---

- name: mkdir
  file:
    path: "{{ project_path }}"
    state: directory

- name: Download file from bucket everydb2
  get_url:
    url: "{{ s3_bucket }}/everydb2.sql"
    dest:  "{{ project_path }}/everydb2.sql"
  register: everydb2

- name: Download file from bucket uma_processed
  get_url:
    url: "{{ s3_bucket }}/uma_processed.sql"
    dest:  "{{ project_path }}/uma_processed.sql"
  register: uma_processed

- name: Create db everydb2
  become: yes
  become_user: postgres
  postgresql_db:
    name: everydb2
    state: present
  when: everydb2.changed

- name: Create db uma_processed
  become: yes 
  become_user: postgres
  postgresql_db:
    name: uma_processed
    state: present
  when: uma_processed.changed

- name: Restore database everydb2
  become: yes
  become_user: postgres
  postgresql_db:
    name: everydb2
    state: restore
    target: "{{ project_path }}/everydb2.sql"
  when: everydb2.changed

- name: Restore database uma_processed
  become: yes
  become_user: postgres
  postgresql_db:
    name: uma_processed
    state: restore
    target: "{{ project_path }}/uma_processed.sql"
  when: uma_processed.changed

- name: postgres privs everysb2
  become: yes
  become_user: postgres
  postgresql_privs:
    db: everydb2
    role: uma
    objs: ALL_IN_SCHEMA
    privs: SELECT,INSERT,UPDATE,DELETE
  when: everydb2.changed

- name: postgres privs uma_processed
  become: yes
  become_user: postgres
  postgresql_privs:
    db: uma_processed
    role: uma
    objs: ALL_IN_SCHEMA
    privs: SELECT,INSERT,UPDATE,DELETE
  when: uma_processed.changed

- name: install python tools
  become: yes
  apt:
    name:
      - python3-pip
      - python3-setuptools
      - python3-psycopg2
      - python3-tqdm
      - python3-boto3
      - python3-numpy
      - python3-requests
      - python-setuptools
    state: latest
    update_cache: True

- copy:
    src: "{{ item }}"
    dest: "{{ project_path }}/"
    owner: ubuntu
    group: ubuntu
    mode: 0777
  with_items:
    - "generate_fragment.py"
    - "LineAPI.py"
    - "UmaDatasetGen2.py"
    - "s3_upload.py"
  register: fragment_generator

- name: execute script
  shell: > 
    cd {{ project_path }};
    nohup sh -c "python3 generate_fragment.py {{ ec2_tag_FromDate }} {{ ec2_tag_ToDate }} {{ ec2_tag_OutName }}; 
    python3 s3_upload.py x_{{ ec2_tag_OutName }}.npy {{ bucket_path }}/x_{{ ec2_tag_OutName }}.npy && 
    python3 s3_upload.py y_{{ ec2_tag_OutName }}.npy {{ bucket_path }}/y_{{ ec2_tag_OutName }}.npy && 
    { [ $(({{ ec2_tag_FromDate }} % 10000)) -eq 100 ] &&
    python3 LineAPI.py \"{{ ec2_tag_OutName }} {{ ec2_tag_FromDate }} ~ {{ ec2_tag_ToDate }} success \" ; 
    shutdown -h now ; } ||
    { python3 s3_upload.py generatefragment.log {{ project_path }}/generatefragment_{{ ec2_tag_OutName }}.log ; 
    python3 LineAPI.py \"{{ ec2_tag_OutName }} {{ ec2_tag_FromDate }} ~ {{ ec2_tag_ToDate }} failed \" ;
    shutdown -h now ; }"
    >generatefragment.log 2>&1 &
  environment:
    DB_EVERYDB2: "postgresql://uma:password@localhost:5432/everydb2"
    DB_UMA_PROCESSED: "postgresql://uma:password@localhost:5432/uma_processed"
    UMA_TRAINER_STATISTICS_BUCKET: "{{ bucket_name }}"
    UMA_AWS_REGION: "{{ lookup('env','UMA_AWS_REGION') }}"
    UMA_AWS_ACCESS_KEY_ID:  "{{ lookup('env','UMA_AWS_ACCESS_KEY_ID') }}"
    UMA_AWS_SECRET_ACCESS_KEY:  "{{ lookup('env','UMA_AWS_SECRET_ACCESS_KEY') }}"
    UMA_LINE_ACCESSTOKEN: "{{ lookup('env','UMA_LINE_ACCESSTOKEN') }}"
  #when: fragment_generator.changed
